/* - - - - - - - - - - - - - 描述语言定义 - - - - - - - - - - - - - */

<num> := 0 | ... | 9
<number> := { <num> }
<alphabet> := a | ... | z | A | ... | Z
<letter> := <alphabet> | _
<word> := <alphabet> { {<letter>} {<num>} }

保留字：
boolean, integer, float, string, requirement, list, set, map
type, requirement, function, rule
and, or, for, in, all, any, include, size_of, merge, from, to

类型定义:
<type signature> := <base type> | <user-defined type> | <collection type>
<base type> := boolean | integer | float | string
<user-defined type> := <word>
<collection type> := list '<' <type signature> '>' | set '<' <type signature> '>' | map '<' <type signature>, <type signature> '>'

模型定义:
<type definition> := type <definition>
<requirement definition> := requirement <definition>
<definition> := <entity name> '{' <field definition> <constraint definition> '}'
<entity name> := <word>
<field definition> := { <field name> <field type>; }
<field name> := <word>
<field type> := <type signature>
<constraint definition> := { <function body> }

规则定义:
<function definition> := function <name> <parameter signatures> -> <return type> <function body>
<rule definition> := rule <name> <parameter signatures> -> boolean <function body>
<reversible rule definition> := revrule <name> '(' <simple signature> , <simple signature> ')' -> boolean <function body>
<name> := <word>
<parameter signatures> := '(' <compound signature> ')'
<simple signature> := <type signature> {, <type signature>}
<compound signature> := <simple signature> { \ <simple signature> }
<return type> := <type signature>
<function body> := '{' <statement> '}'

<statement> := <unitary operator statement>
             | <binary operator statement>
             | <multi-operator statement>
             | <loop statement>
             | <substring statement>
             | <find string statement>
             | <statement> '[' <statement> ']'
             | <statement>.<word>
             | '%' <statement> '%'
             | <word>

<unitary operator statement> := '{' <unitary operator> <statement> '}'
<unitary operator> := size_of | ! ｜ -

<binary operator statement> := '{' <statement> <binary operator> <statement> '}'
<binary operator> := <calculation binary operator>
                   | <logic binary operator>
                   | <comparison operator>
                   | include
                   | in
                   | find
<calculation binary operator> := + ｜ - ｜ * ｜ \
<logic binary operator> := and | or
<comparison operator> := < | > | <= | >= | == | !=

<multi-operator statement> := <multi-operator> '(' <statement> {, <statement>} ')'
<multi-operator> := + ｜* | merge | <logic binary operator> | <customized operator>
<customized operator> := <word>
<loop statement> := for (all | any) <statement> <range> '(' <statement> ')'
<range> := in <statement> | from <statement> to <statement>

<substring statement> := substring '(' <S>, <begin>, <end> ')'
<find string statement> := find '(' <S>, <from>, <s> ')'


/* - - - - - - - - - - - - - 需求元组 JSON 格式 - - - - - - - - - - - - - */
<requirement JSON file> := '[' <entity> {, <entity>} ']'
<entity> := <boolean> | <integer> | <string> | <list> | <set> | <map> | <entity> | <link>
<boolean> := true | false
<integer> := 一个数字
<string> := "一个字符串"
<list> := '{' "-list-": '[' <entity> {, <entity>} ']' '}'
<set> := '{' "-set-": '[' <entity> {, <entity>} ']' '}'
<map> := '{' "-map-": '[' <key value pair> {, <key value pair>} ']' '}'
<key value pair> := '{' "-key-": <entity>, "-value-": <entity> '}'
<entity> := '{' "#": <entity ID>, <entity type>: '{' <field name>: <entity> {, <field name>: <entity>} '}' '}'
<link> := '{' "-link-": '{' <entity type>: <entity ID> '}' '}'
<entity ID> := <string>
<entity type> := <string>
<field name> := <string>


/* - - - - - - - - - - - - - Entity 定义 JSON 格式 - - - - - - - - - - - - - */
<entity JSON file> := '[' <entity> {, <entity>} ']'
<entity> := '{' "_type_": "<type>", "_name_": "<entity name>", <field define> {, <field define>} '}'
<type> := entity / requirement
<entity name> := <string>
<field define> := "<field name>": "<field type>"
<field name> := <string>
<field type> := <string>

