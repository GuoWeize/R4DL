EBNF形式

<num> := 0 | ... | 9
<number> := { <num> }
<alphabet> := a | ... | z | A | ... | Z
<letter> := <alphabet> | _
<word> := <alphabet> { {<letter>} {<num>} }

保留字：
boolean, integer, float, string, requirement, list, set, map
type, requirement, function, rule
sum, mul, and, or, for, in, all, any, include, size of, merge

类型定义:
<type signature> := <base type> | <user-defined type> | <collection type>
<base type> := boolean | integer | float | string
<user-defined type> := <word>
<collection type> := list '<' <type signature> '>' | set '<' <type signature> '>' | map '<' <type signature>, <type signature> '>'

模型定义:
<type definition> := type <definition>
<requirement definition> := requirement <definition>
<definition> := <entity name> '{' <field definition> <constraint definition> '}'
<entity name> := <word>
<field definition> := { <field name> <field type>; }
<field name> := <word>
<field type> := <type signature>
<constraint definition> := { <function body> }

规则定义:
<function definition> := function <name> <parameter signatures> -> <return type> <function body>
<rule definition> := rule <name> <parameter signatures> -> boolean <function body>
<name> := <word>
<parameter signatures> := '(' <optional signature> ')'
<simple signature> := <type signature> {, <type signature>}
<compound signature> := <simple signature> { \ <simple signature> }
<return type> := <type signature>
<function body> := '{' <statement> '}'

<statement> := <logic statement> | <not statement> | <for statement> | <calculate statement> | <function statement> |
               <compare statement> | <collection statement> | <element>
<logic statement> := <logic operator> '{' <statement> {, <statement>} '}'
<logic operator> := and | or
<not statement> := '(' ! <statement> ')'
<for statement> := for <set operator> <variable> in <statement> '{' <statement> '}'
<for operator> := all | any
<calculate statement> := <common> | <special>
<common> := '(' <statement> (+ | - | * | /) <statement> ')'
<special> := (sum | mul) '{' <statement> {, <statement>} '}'
<function statement> := <function name> '{' <statement> {, <statement>} '}'
<function name> := <word>
<compare statement> := '(' <statement> <compare operation> <statement> ')'
<compare operation> := < | > | <= | >= | ==
<collection statement> := <collection size> | <collection include> | <collection merge> | <collection value>
<collection size> := '(' size of <statement> ')'
<collection include> := '(' <statement> include <statement> ')'
<collection merge> := merge '{' <statement> {, <statement>} '}'
<collection in> := '(' <statement> in <statement> ')'
<collection value> := <statement> '[' <number> ']'

<element> := <base entity> | <parameter> | <entity field>
<base entity> := <word>
<parameter> := $<number>$
<entity field> := <element>.<field name>