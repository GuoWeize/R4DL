[
    {
        "#": "FR-1",
        "*": "functional",
        ":": "A class is used to represent the dependency between one task and one human resource.",
        "agent": {"entity": "class"},
        "operation": {"operation": "represent"},
        "input": {
            "()": [
                {"entity": "task"},
                {"entity": "human resource"}
            ]
        },
        "output": {
            "()": [{"entity": "dependency between one task and one human resource"}]
        }
    },
    {
        "#": "FR-2",
        "*": "functional",
        ":": "The dependency class provides functions to get the task and the human resource.",
        "agent": {"entity": "dependency class"},
        "operation": {"operation": "get"},
        "output": {
            "()": [
                {"entity": "task"},
                {"entity": "human resource"}
            ]
        }
    },
    {
        "#": "FR-3",
        "*": "functional",
        ":": "A collection of resource assignments is used to manage the relationships between multiple human resources and a task.",
        "agent": {"entity": "collection of resource assignments"},
        "operation": {"operation": "manage"},
        "input": {
            "()": [
                {"entity": "relationships between multiple human resources and a task"},
                {"entity": "multiple human resources"},
                {"entity": "task"}
            ]
        }
    },
    {
        "#": "FR-4",
        "*": "functional",
        ":": "A collection of resource assignments contains multiple objects of the human resource assignment class.",
        "agent": {"entity": "collection of resource assignments"},
        "operation": {"operation": "contain"},
        "input": {
            "()": [{"entity": "multiple objects of the human resource assignment class"}]
        }
    },
    {
        "#": "FR-5-1",
        "*": "functional",
        ":": "A collection of resource assignments provides functions to add and remove human resource assignments.",
        "agent": {"entity": "collection of resource assignments"},
        "operation": {"operation": "add"},
        "input": {
            "()": [{"entity": "human resource assignment"}]
        },
        "output": {
            "()": [{"entity": "human resource assignment"}]
        }
    },
    {
        "#": "FR-5-2",
        "*": "functional",
        ":": "A collection of resource assignments provides functions to add and remove human resource assignments.",
        "agent": {"entity": "collection of resource assignments"},
        "operation": {"operation": "remove"},
        "input": {
            "()": [{"entity": "human resource assignment"}]
        },
        "output": {
            "()": [{"entity": "human resource assignment"}]
        }
    },
    {
        "#": "FR-6",
        "*": "functional",
        ":": "The task class uses an object of the assignments collection class to manage its assignments.",
        "agent": {"entity": "task class"},
        "operation": {"operation": "manage"},
        "input": {
            "()": [
                {"entity": "object of the assignments collection class"},
                {"entity": "assignments of task class"}
            ]
        }
    },
    {
        "#": "FR-7",
        "*": "functional",
        ":": "The human resource class can have objects of resource assignments which assigns this resource to tasks.",
        "agent": {"entity": "human resource class"},
        "operation": {"operation": "can have"},
        "input": {
            "()": [
                {"entity": "multiple objects of resource assignments which assigns this resource to tasks"},
                {"entity": "tasks"}
            ]
        }
    },
    {
        "#": "FR-8",
        "*": "functional",
        ":": "The human resource class provides function to get the list of objects of resource assignments which assigns this resource to tasks.",
        "agent": {"entity": "human resource class"},
        "operation": {"operation": "get"},
        "output": {
            "()": [{"entity": "list of objects of resource assignments which assigns this resource to tasks"}]
        }
    },
    {
        "#": "FR-9-1",
        "*": "functional",
        ":": "Task property GUI class provides interface and functions to add and remove human resource assignments.",
        "agent": {"entity": "task property GUI class"},
        "operation": {"operation": "add"},
        "input": {
            "()": [{"entity": "human resource assignments"}]
        },
        "output": {
            "()": [{"entity": "human resource assignment"}]
        }
    },
    {
        "#": "FR-9-2",
        "*": "functional",
        ":": "Task property GUI class provides interface and functions to add and remove human resource assignments.",
        "agent": {"entity": "task property GUI class"},
        "operation": {"operation": "remove"},
        "input": {
            "()": [{"entity": "human resource assignments"}]
        },
        "output": {
            "()": [{"entity": "human resource assignment"}]
        }
    },
    {
        "#": "FR-10",
        "*": "functional",
        ":": "A GUI class uses an object of resource tree table model class to display the resource tree.",
        "agent": {"entity": "GUI class"},
        "operation": {"operation": "display"},
        "input": {
            "()": [{"entity": "object of resource tree table model class"}]
        },
        "output": {
            "()": [{"entity": "resource tree"}]
        }
    },
    {
        "#": "FR-11",
        "*": "functional",
        ":": "The resource tree table model provides functions to build subtrees based on dependencies.",
        "agent": {"entity": "resource tree table model"},
        "operation": {"operation": "build"},
        "input": {
            "()": [{"entity": "dependencies"}]
        },
        "output": {
            "()": [{"entity": "subtrees of resource tree"}]
        }
    },
    {
        "#": "FR-12",
        "*": "functional",
        ":": "A GUI class of human resource load distribution uses objects of a load distribution class to capture the hours each person is supposed to work.",
        "agent": {"entity": "human resource load distribution GUI class"},
        "operation": {"operation": "capture"},
        "input": {
            "()": [{"entity": "objects of a load distribution class"}]
        },
        "output": {
            "()": [{"entity": "hours each person is supposed to work"}]
        }
    },
    {
        "#": "FR-13",
        "*": "functional",
        ":": "The load distribution class provides functions to calculate the distribution based on tasks and human resources using task manager.",
        "agent": {"entity": "load distribution class"},
        "operation": {"operation": "calculate"},
        "input": {
            "()": [
                {"entity": "tasks"},
                {"entity": "human resources"},
                {"entity": "task manager"}
            ]
        },
        "output": {
            "()": [{"entity": "distribution"}]
        }
    },
    {
        "#": "FR-14",
        "*": "functional",
        ":": "GUI needs to provide ability to change length of a task.",
        "agent": {"entity": "GUI"},
        "operation": {"operation": "change"},
        "input": {
            "()": [{"entity": "length of a task"}]
        },
        "output": {
            "()": [{"entity": "length of a task"}]
        }
    },
    {
        "#": "FR-15",
        "*": "functional",
        ":": "User should be able to change the length of a task by dragging-and-dropping the bar on the GUI.",
        "agent": {"entity": "user"},
        "operation": {"operation": "can change"},
        "input": {
            "()": [
                {"entity": "length of a task"},
                {"entity": "bar on the GUI"}
            ]
        },
        "output": {
            "()": [{"entity": "length of a task"}]
        },
        "restriction": {
            "()": ["by dragging-and-dropping the bar on the GUI"]
        }
    },
    {
        "#": "FR-16",
        "*": "functional",
        ":": "User should be able to change the length of a task via date picker control.",
        "agent": {"entity": "user"},
        "operation": {"operation": "can change"},
        "input": {
            "()": [
                {"entity": "length of a task"},
                {"entity": "date picker control"}
            ]
        },
        "output": {
            "()": [{"entity": "length of a task"}]
        },
        "restriction": {
            "()": ["via date picker control"]
        }
    },
    {
        "#": "FR-17",
        "*": "functional",
        ":": "A dependency class contains a dependant task and a dependee task.",
        "agent": {"entity": "dependency class"},
        "operation": {"operation": "contain"},
        "input": {
            "()": [
                {"entity": "dependant task"},
                {"entity": "dependee task"}
            ]
        }
    },
    {
        "#": "FR-18",
        "*": "functional",
        ":": "A dependency class provides functions to get the dependant task and the dependee task.",
        "agent": {"entity": "dependency class"},
        "operation": {"operation": "get"},
        "output": {
            "()": [
                {"entity": "dependant task"},
                {"entity": "dependee task"}
            ]
        }
    },
    {
        "#": "FR-19",
        "*": "functional",
        ":": "The dependency class also contains constraint to show the start date of the dependee task.",
        "agent": {"entity": "dependency class"},
        "operation": {"operation": "show"},
        "input": {
            "()": [{"entity": "constraint"}]
        },
        "output": {
            "()": [{"entity": "constraint of the dependency"}]
        }
    },
    {
        "#": "FR-20",
        "*": "functional",
        ":": "A class is used to represent the constraint that the start date of the dependee task should not be earlier than the end date of the dependent task.",
        "agent": {"entity": "class"},
        "operation": {"operation": "represent"},
        "input": {
            "()": [
                {"entity": "start date of the dependee task"},
                {"entity": "end date of the dependent task"}
            ]
        },
        "output": {
            "()": [{"entity": "constraint"}]
        }
    },
    {
        "#": "FR-21",
        "*": "functional",
        ":": "A collection of dependency class is used to manage dependencies.",
        "agent": {"entity": "collection of dependency class"},
        "operation": {"operation": "manage"},
        "input": {
            "()": [{"entity": "dependencies"}]
        }
    },
    {
        "#": "FR-22",
        "*": "functional",
        ":": "A collection of dependency class contains objects of dependency classes.",
        "agent": {"entity": "collection of dependency class"},
        "operation": {"operation": "contain"},
        "input": {
            "()": [{"entity": "objects of dependency classes"}]
        }
    },
    {
        "#": "FR-23",
        "*": "functional",
        ":": "A collection of dependency class provides functions to create, delete, and get dependencies.",
        "agent": {"entity": "collection of dependency class"},
        "operation": {"operation": "create"},
        "output": {
            "()": [{"entity": "dependencies"}]
        }
    },
    {
        "#": "FR-24",
        "*": "functional",
        ":": "A collection of dependency class provides functions to create, delete, and get dependencies.",
        "agent": {"entity": "collection of dependency class"},
        "operation": {"operation": "delete"},
        "output": {
            "()": [{"entity": "dependencies"}]
        }
    },
    {
        "#": "FR-25",
        "*": "functional",
        ":": "A collection of dependency class provides functions to create, delete, and get dependencies.",
        "agent": {"entity": "collection of dependency class"},
        "operation": {"operation": "get"},
        "output": {
            "()": [{"entity": "dependencies"}]
        }
    },
    {
        "#": "FR-26",
        "*": "functional",
        ":": "Task property GUI class provides interface and functions to add and remove dependencies by using an object of the dependency collection.",
        "agent": {"entity": "task property GUI class"},
        "operation": {"operation": "add"},
        "input": {
            "()": [
                {"entity": "dependencies"},
                {"entity": "object of the dependency collection"}
            ]
        },
        "output": {
            "()": [{"entity": "dependencies"}]
        },
        "restriction": {
            "()": ["by using an object of the dependency collection"]
        }
    },
    {
        "#": "FR-27",
        "*": "functional",
        ":": "A task property GUI class provides interface and functions to add and remove dependencies by using an object of the dependency collection.",
        "agent": {"entity": "task property GUI class"},
        "operation": {"operation": "remove"},
        "input": {
            "()": [
                {"entity": "dependencies"},
                {"entity": "object of the dependency collection"}
            ]
        },
        "output": {
            "()": [{"entity": "dependencies"}]
        },
        "restriction": {
            "()": ["by using an object of the dependency collection"]
        }
    },
    {
        "#": "FR-28",
        "*": "functional",
        ":": "A graphic area GUI class provides function to draw dependency.",
        "agent": {"entity": "graphic area GUI class"},
        "operation": {"operation": "draw"},
        "output": {
            "()": [{"entity": "dependency"}]
        }
    },
    {
        "#": "FR-29",
        "*": "functional",
        ":": "A graphic area GUI class uses an object of task manager to add dependencies.",
        "agent": {"entity": "graphic area GUI class"},
        "operation": {"operation": "add"},
        "input": {
            "()": [
                {"entity": "object of task manager"},
                {"entity": "dependencies"}
            ]
        },
        "output": {
            "()": [{"entity": "dependencies"}]
        }
    },
    {
        "#": "FR-30",
        "*": "functional",
        ":": "The task manager class uses an object of dependency collection class to manage dependencies.",
        "agent": {"entity": "task manager class"},
        "operation": {"operation": "manage"},
        "input": {
            "()": [
                {"entity": "object of dependency collection class"},
                {"entity": "dependencies"}
            ]
        }
    },
    {
        "#": "FR-31",
        "*": "functional",
        ":": "An object of the recalculating task schedule algorithm class is used to change the start/end date based on dependency changes.",
        "agent": {"entity": "object of the recalculating task schedule algorithm class"},
        "operation": {"operation": "change"},
        "input": {
            "()": [{"entity": "dependency changes"}]
        },
        "output": {
            "()": [{"entity": "start/end date"}]
        }
    },
    {
        "#": "FR-32",
        "*": "functional",
        ":": "The algorithm class provides functions to fulfill the constraints.",
        "agent": {"entity": "algorithm class"},
        "operation": {"operation": "fulfill"},
        "input": {
            "()": [{"entity": "constraints"}]
        }
    },
    {
        "#": "FR-33",
        "*": "functional",
        ":": "The algorithm class provides functions to modify the start or end date of the tasks.",
        "agent": {"entity": "algorithm class"},
        "operation": {"operation": "modify"},
        "output": {
            "()": [{"entity": "start or end date of the tasks"}]
        }
    },
    {
        "#": "FR-34",
        "*": "functional",
        ":": "Application needs to keep track of the start and end times of the tasks.",
        "agent": {"entity": "application"},
        "operation": {"operation": "keep track of"},
        "output": {
            "()": [{"entity": "start/end times of the tasks"}]
        }
    },
    {
        "#": "FR-35",
        "*": "functional",
        ":": "Application needs to keep track of subtasks in a task.",
        "agent": {"entity": "application"},
        "operation": {"operation": "keep track of"},
        "input": {
            "()": [{"entity": "subtasks in a task"}]
        }
    },
    {
        "#": "FR-36",
        "*": "functional",
        ":": "Every time Start/End time of a subtask changes, the start/end time of the parent task need to change accordingly.",
        "event": {
            "()": [{
                "#": "52-condition",
                "*": "condition",
                "operation": {"operation": "change"},
                "input": {
                    "()": [{"entity": "start/end time of a subtask"}]
                },
                "output": {
                    "()": [{"entity": "start/end time of a subtask"}]
                }
            }]
        },
        "operation": {"operation": "change"},
        "input": {
            "()": [{"entity": "start/end time of the parent task"}]
        },
        "output": {
            "()": [{"entity": "start/end time of the parent task"}]
        },
        "restriction": {
            "()": ["accordingly"]
        }
    },
    {
        "#": "FR-37",
        "*": "functional",
        ":": "Every time Start/End time for a task changes, the start/end time of one or more its subtasks need to change as well.",
        "event": {
            "()": [{
                "#": "54-condition",
                "*": "condition",
                "operation": {"operation": "change"},
                "input": {
                    "()": [{"entity": "start/end time of a task"}]
                },
                "output": {
                    "()": [{"entity": "start/end time of a task"}]
                }
            }]
        },
        "operation": {"operation": "change"},
        "input": {
            "()": [{"entity": "start/end time of one or more subtasks"}]
        },
        "output": {
            "()": [{"entity": "start/end time of one or more subtasks"}]
        }
    },
    {
        "#": "FR-38",
        "*": "functional",
        ":": "A graphic area GUI class provides a function to draw dependency.",
        "agent": {"entity": "graphic area GUI class"},
        "operation": {"operation": "draw"},
        "input": {
            "()": [{"entity": "dependency"}]
        }
    },
    {
        "#": "FR-39",
        "*": "functional",
        ":": "A graphic area GUI class uses an object of the task manager to add dependencies",
        "agent": {"entity": "graphic area GUI class"},
        "operation": {"operation": "add"},
        "input": {
            "()": [{"entity": "dependency"}]
        }
    },
    {
        "#": "FR-40",
        "*": "functional",
        ":": "The class of dependency collection provides a function to check if the new dependency will cause a loop, each time a object of dependency class is created.",
        "event": {
            "()": [{
                "#": "each time a object of dependency class is created",
                "*": "condition",
                "operation": {"operation": "create"},
                "output": {
                    "()": [{"entity": "object of dependency class"}]
                }
            }]
        },
        "agent": {"entity": "dependency collection class"},
        "operation": {"operation": "check"},
        "input": {
            "()": [{"entity": "new dependency"}]
        }
    },
    {
        "#": "FR-41",
        "*": "functional",
        ":": "The class of dependency collection returns an exception if there is a loop.",
        "event": {
            "()": [{
                "#": "if there is a loop",
                "*": "condition",
                "agent": {"entity": "loop"},
                "operation": {"operation": "there be"}
            }]
        },
        "agent": {"entity": "dependency collection class"},
        "operation": {"operation": "return"},
        "output": {
            "()": [{"entity": "exception"}]
        }
    },
    {
        "#": "FR-42",
        "*": "functional",
        ":": "GUI needs to provide ability to display critical path.",
        "agent": {"entity": "GUI"},
        "operation": {"operation": "display"},
        "input": {
            "()": [{"entity": "critical path"}]
        }
    },
    {
        "#": "FR-43",
        "*": "functional",
        ":": "GUI needs to provide ability to make the changes affecting critical path updated.",
        "agent": {"entity": "GUI"},
        "operation": {"operation": "update"},
        "input": {
            "()": [{"entity": "changes affecting critical path"}]
        },
        "output": {
            "()": [{"entity": "changes affecting critical path"}]
        }
    },
    {
        "#": "FR-44",
        "*": "functional",
        ":": "The system should be able to evaluate critical path in a project.",
        "agent": {"entity": "system"},
        "operation": {"operation": "can evaluate"},
        "input": {
            "()": [{"entity": "critical path in a project"}]
        }
    },
    {
        "#": "FR-45",
        "*": "functional",
        ":": "The human resource class contains the variable holidays.",
        "agent": {"entity": "human resource class"},
        "operation": {"operation": "contain"},
        "input": {
            "()": [{"entity": "variable holidays"}]
        }
    },
    {
        "#": "FR-46-1",
        "*": "functional",
        ":": "The human resource class provides functions to change and to get holidays.",
        "agent": {"entity": "human resource class"},
        "operation": {"operation": "change"},
        "input": {
            "()": [{"entity": "holidays"}]
        },
        "output": {
            "()": [{"entity": "holidays"}]
        }
    },
    {
        "#": "FR-46-2",
        "*": "functional",
        ":": "The human resource class provides functions to change and to get holidays.",
        "agent": {"entity": "human resource class"},
        "operation": {"operation": "get"},
        "output": {
            "()": [{"entity": "holidays"}]
        }
    },
    {
        "#": "FR-47",
        "*": "functional",
        ":": "There can be multiple holidays.",
        "agent": {"entity": "multiple holidays"},
        "operation": {"operation": "there be"}
    },
    {
        "#": "FR-48",
        "*": "functional",
        ":": "The holiday class provides functions to set the start/end date of the holiday.",
        "agent": {"entity": "holiday class"},
        "operation": {"operation": "set"},
        "output": {
            "()": [{"entity": "start/end date of the holiday"}]
        }
    },
    {
        "#": "FR-49",
        "*": "functional",
        ":": "The holiday class provides functions to get the duration of the holiday.",
        "agent": {"entity": "holiday class"},
        "operation": {"operation": "get"},
        "output": {
            "()": [{"entity": "duration of the holiday"}]
        }
    },
    {
        "#": "FR-50",
        "*": "functional",
        ":": "The human resource class provides a function to change the availability of the person based on holidays.",
        "agent": {"entity": "human resource class"},
        "operation": {"operation": "change"},
        "input": {
            "()": [
                {"entity": "availability of the person"},
                {"entity": "holidays"}
            ]
        },
        "output": {
            "()": [{"entity": "availability of the person"}]
        }
    },
    {
        "#": "FR-51",
        "*": "functional",
        ":": "GUI needs to provide ability to assign tasks to people.",
        "agent": {"entity": "GUI"},
        "operation": {"operation": "assign"},
        "input": {
            "()": [{"entity": "people"}]
        },
        "output": {
            "()": [{"entity": "tasks"}]
        }
    },
    {
        "#": "FR-52",
        "*": "functional",
        ":": "GUI needs to provide ability to assign people to tasks.",
        "agent": {"entity": "GUI"},
        "operation": {"operation": "assign"},
        "input": {
            "()": [{"entity": "tasks"}]
        },
        "output": {
            "()": [{"entity": "people"}]
        }
    },
    {
        "#": "FR-53",
        "*": "functional",
        ":": "GUI needs to provide ability to show utilization of a person.",
        "agent": {"entity": "GUI"},
        "operation": {"operation": "show"},
        "output": {
            "()": [{"entity": "utilization of a person"}]
        }
    },
    {
        "#": "FR-54",
        "*": "functional",
        ":": "GUI needs to provide ability to show whether a person is underutilized and overbooked.",
        "agent": {"entity": "GUI"},
        "operation": {"operation": "show"},
        "output": {
            "()": [
                {"entity": "underutilized person"},
                {"entity": "overbooked person"}
            ]
        }
    },
    {
        "#": "FR-55",
        "*": "functional",
        ":": "To create a new task, an object of TaskManager class is passed to the class constructor.",
        "operation": {"operation": "pass"},
        "input": {
            "()": [
                {"entity": "object of TaskManager class"},
                {"entity": "class constructor"}
            ]
        },
        "output": {
            "()": [{"entity": "new task"}]
        }
    },
    {
        "#": "FR-56",
        "*": "functional",
        ":": "The TaskManager takes care of a resource allocation using ResourceAssignmentCollection class.",
        "agent": {"entity": "TaskManager"},
        "operation": {"operation": "take care of"},
        "input": {
            "()": [
                {"entity": "ResourceAssignmentCollection class"},
                {"entity": "resource allocation"}
            ]
        },
        "output": {
            "()": [{"entity": "resource allocation"}]
        }
    },
    {
        "#": "FR-57",
        "*": "functional",
        ":": "The task class provides a public method SetStart() which allows to specify starting date for the task. As input argument the method takes an object of GanttCalendar class.",
        "agent": {"entity": "task class"},
        "operation": {"operation": "specify"},
        "input": {
            "()": [{"entity": "object of GanttCalendar class"}]
        },
        "output": {
            "()": [{"entity": "start date of the task"}]
        }
    },
    {
        "#": "FR-58",
        "*": "functional",
        ":": "The task class provides a public method SetEnd() which allows to specify ending date for the task. As input argument the method takes an object of GanttCalendar class.",
        "agent": {"entity": "task class"},
        "operation": {"operation": "specify"},
        "input": {
            "()": [{"entity": "object of GanttCalendar class"}]
        },
        "output": {
            "()": [{"entity": "end date of the task"}]
        }
    },
    {
        "#": "FR-59",
        "*": "functional",
        ":": "The Task class provides a public method SetDuration() which allows to specify the duration of the task. As input argument the method takes an object of TaskLength class.",
        "agent": {"entity": "task class"},
        "operation": {"operation": "specify"},
        "input": {
            "()": [{"entity": "object of TaskLength class"}]
        },
        "output": {
            "()": [{"entity": "duration of the task"}]
        }
    },
    {
        "#": "FR-60",
        "*": "functional",
        ":": "To delete a task from the Calendar, the GanttProject class call delete method and supplied TaskId parameter.",
        "agent": {"entity": "GanttProject class"},
        "operation": {"operation": "call"},
        "input": {
            "()": [
                {"entity": "task"},
                {"entity": "delete method"}
            ]
        },
        "output": {
            "()": [{"entity": "TaskId parameter"}]
        }
    },
    {
        "#": "FR-61",
        "*": "functional",
        ":": "The adjustment of allocated resources and links to other tasks takes place through interfacing with the following classes DefaultMutableTreeNode, GanttTreeTableNode, TaskNode, and AdjustTaskBoundsAlgorithm.",
        "agent": {"entity": "adjustment of allocated resources and links to other tasks takes"},
        "operation": {"operation": "take place"},
        "input": {
            "()": [
                {"entity": "DefaultMutableTreeNode"},
                {"entity": "GanttTreeTableNode"},
                {"entity": "TaskNode"},
                {"entity": "AdjustTaskBoundsAlgorithm"}
            ]
        }
    },
    {
        "#": "FR-62",
        "*": "functional",
        ":": "When deleting a task, the GanttProject class calls GanttTreeTableNode and DefaultMutableTreeNode classes to identify the parent of the deleted task.",
        "event": {
            "()": [{
                "#": "When deleting a task",
                "*": "condition",
                "agent": {"entity": "GanttProject class"},
                "operation": {"operation": "delete"},
                "output": {
                    "()": [{"entity": "task"}]
                }
            }]
        },
        "agent": {"entity": "GanttProject class"},
        "operation": {"operation": "identify"},
        "input": {
            "()": [
                {"entity": "DefaultMutableTreeNode"},
                {"entity": "GanttTreeTableNode"}
            ]
        },
        "output": {
            "()": [{"entity": "parent of the deleted task"}]
        }
    },
    {
        "#": "FR-63-1",
        "*": "functional",
        ":": "When deleting a task, the GanttProject class calls AdjustTaskBoundsAlgorithm and passes the parent of the deleted task as a parameter.",
        "event": {
            "()": [{
                "#": "When deleting a task",
                "*": "condition",
                "agent": {"entity": "GanttProject class"},
                "operation": {"operation": "delete"},
                "output": {
                    "()": [{"entity": "task"}]
                }
            }]
        },
        "agent": {"entity": "GanttProject class"},
        "operation": {"operation": "call"},
        "input": {
            "()": [{"entity": "AdjustTaskBoundsAlgorithm"}]
        }
    },
    {
        "#": "FR-63-2",
        "*": "functional",
        ":": "When deleting a task, the GanttProject class calls AdjustTaskBoundsAlgorithm and passes the parent of the deleted task as a parameter.",
        "event": {
            "()": [{
                "#": "When deleting a task",
                "*": "condition",
                "agent": {"entity": "GanttProject class"},
                "operation": {"operation": "delete"},
                "output": {
                    "()": [{"entity": "task"}]
                }
            }]
        },
        "agent": {"entity": "GanttProject class"},
        "operation": {"operation": "pass"},
        "output": {
            "()": [{"entity": "parent of the deleted task"}]
        },
        "restriction": {"()": ["as a parameter"]}
    },
    {
        "#": "FR-64",
        "*": "functional",
        ":": "The AdjustTaskBoundsAlgorithm takes care of handling and releasing resources associated with the deleted task.",
        "agent": {"entity": "AdjustTaskBoundsAlgorithm"},
        "operation": {"operation": "take care of"},
        "input": {
            "()": [{"entity": "handling and releasing resources associated with the deleted task"}]
        },
        "output": {
            "()": [{"entity": "handling and releasing resources associated with the deleted task"}]
        }
    },
    {
        "#": "FR-65",
        "*": "functional",
        ":": "GUI should able to provide ability to change task name.",
        "agent": {"entity": "GUI"},
        "operation": {"operation": "change"},
        "input": {
            "()": [{"entity": "task name"}]
        },
        "output": {
            "()": [{"entity": "task name"}]
        }
    },
    {
        "#": "FR-66",
        "*": "functional",
        ":": "GUI should able to provide ability to change start/end date of a task.",
        "agent": {"entity": "GUI"},
        "operation": {"operation": "can change"},
        "input": {
            "()": [{"entity": "start/end date of a task"}]
        },
        "output": {
            "()": [{"entity": "start/end date of a task"}]
        }
    },
    {
        "#": "FR-67",
        "*": "functional",
        ":": "GUI should able to provide ability to set progress on a task.",
        "agent": {"entity": "GUI"},
        "operation": {"operation": "can set"},
        "input": {
            "()": [{"entity": "progress"}]
        },
        "output": {
            "()": [{"entity": "progress"}]
        },
        "restriction": {
            "()": ["on a task"]
        }
    },
    {
        "#": "FR-68",
        "*": "functional",
        ":": "When the start/end date of a task are changed, the start/end dates of the subtasks need to change accordingly.",
        "event": {
            "()": [{
                "#": "When the start/end date of a task are changed",
                "*": "condition",
                "operation": {"operation": "change"},
                "input": {
                    "()": [{"entity": "start/end date of a task"}]
                },
                "output": {
                    "()": [{"entity": "start/end date of a task"}]
                }
            }]
        },
        "operation": {"operation": "change"},
        "input": {
            "()": [{"entity": "start/end dates of the subtasks"}]
        },
        "output": {
            "()": [{"entity": "start/end dates of the subtasks"}]
        },
        "restriction": {
            "()": ["accordingly"]
        }
    },
    {
        "#": "FR-69",
        "*": "functional",
        ":": "To add tasks as subtasks a method which indent the selected task nodes in GUI and change them to be subtasks is used.",
        "operation": {"operation": "add"},
        "input": {
            "()": [
                {"entity": "tasks"},
                {"entity": "subtasks"},
                {"entity": "method which indent the selected task nodes in GUI and change them to be subtasks"},
                {"entity": "selected task nodes in GUI"}
            ]
        }
    },
    {
        "#": "FR-70",
        "*": "functional",
        ":": "A manager of task hierarchy provides functions to update the relationship between tasks.",
        "agent": {"entity": "manager of task hierarchy"},
        "operation": {"operation": "update"},
        "input": {
            "()": [{"entity": "relationship between tasks"}]
        },
        "output": {
            "()": [{"entity": "relationship between tasks"}]
        }
    },
    {
        "#": "FR-71",
        "*": "functional",
        ":": "The manager of task hierarchy provides a method to move a task node to a specific position.",
        "agent": {"entity": "manager of task hierarchy"},
        "operation": {"operation": "move"},
        "input": {
            "()": [{"entity": "task node"}]
        },
        "output": {
            "()": [{"entity": "task node"}]
        },
        "restriction": {
            "()": ["to a specific position"]
        }
    },
    {
        "#": "FR-72",
        "*": "functional",
        ":": "To remove tasks as subtasks GanttTree2 class calls a method which dedent selected task nodes in GUI.",
        "agent": {"entity": "GanttTree2 class"},
        "operation": {"operation": "remove"},
        "input": {
            "()": [
                {"entity": "tasks"},
                {"entity": "subtasks"},
                {"entity": "method which dedent selected task nodes in GUI"}
            ]
        },
        "output": {
            "()": [{"entity": "tasks"}]
        }
    },
    {
        "#": "FR-73",
        "*": "functional",
        ":": "An object of a class is used to remove relationship between selected tasks and their original parents.",
        "agent": {"entity": "object of a class"},
        "operation": {"operation": "remove"},
        "input": {
            "()": [
                {"entity": "selected tasks"},
                {"entity": "original parents of selected tasks"},
                {"entity": "relationship between selected tasks and their original parents"}
            ]
        },
        "output": {
            "()": [{"entity": "relationship between selected tasks and their original parents"}]
        }
    },
    {
        "#": "FR-74",
        "*": "functional",
        ":": "An object of a class is used to add relationship between selected tasks and their new parents.",
        "agent": {"entity": "object of a class"},
        "operation": {"operation": "add"},
        "input": {
            "()": [
                {"entity": "selected tasks"},
                {"entity": "new parents of selected tasks"},
                {"entity": "relationship between selected tasks and their new parents"}
            ]
        },
        "output": {
            "()": [{"entity": "relationship between selected tasks and their new parents"}]
        }
    },
    {
        "#": "FR-75",
        "*": "functional",
        ":": "To remove tasks as subtasks a method which dedent selected task nodes in GUI is used.",
        "operation": {"operation": "remove"},
        "input": {
            "()": [
                {"entity": "tasks"},
                {"entity": "subtasks"},
                {"entity": "relationship between selected tasks and their new parents"}
            ]
        },
        "output": {
            "()": [{"entity": "tasks"}]
        }
    },
    {
        "#": "FR-76",
        "*": "functional",
        ":": "The task tree model provides methods to remove relationship between selected tasks and their original parents.",
        "agent": {"entity": "task tree model"},
        "operation": {"operation": "remove"},
        "input": {
            "()": [
                {"entity": "selected tasks"},
                {"entity": "original parents of selected tasks"},
                {"entity": "relationship between selected tasks and their original parents"}
            ]
        },
        "output": {
            "()": [{"entity": "relationship between selected tasks and their original parents"}]
        }
    },
    {
        "#": "FR-77",
        "*": "functional",
        ":": "The task tree model provides methods to add relationship between selected tasks and their new parents.",
        "agent": {"entity": "task tree model"},
        "operation": {"operation": "add"},
        "input": {
            "()": [
                {"entity": "selected tasks"},
                {"entity": "original parents of selected tasks"},
                {"entity": "relationship between selected tasks and their original parents"}
            ]
        },
        "output": {
            "()": [{"entity": "relationship between selected tasks and their original parents"}]
        }
    },
    {
        "#": "FR-78",
        "*": "functional",
        ":": "Milestone has only time point of occurrence.",
        "agent": {"entity": "Milestone"},
        "operation": {"operation": "have"},
        "input": {
            "()": [{"entity": "time point of occurrence"}]
        },
        "restriction": {
            "()": ["only"]
        }
    },
    {
        "#": "FR-79",
        "*": "functional",
        ":": "User should be able to create milestones.",
        "agent": {"entity": "user"},
        "operation": {"operation": "can create"},
        "output": {
            "()": [{"entity": "milestones"}]
        }
    },
    {
        "#": "FR-80",
        "*": "functional",
        ":": "User interface should be able to provide an ability to specify whether a specific task in a milestone.",
        "agent": {"entity": "user interface"},
        "operation": {"operation": "can specify"},
        "input": {
            "()": [
                {"entity": "specific task"},
                {"entity": "milestone"}
            ]
        }
    },
    {
        "#": "FR-81",
        "*": "functional",
        ":": "Milestone should be displayed visually differently from regular tasks.",
        "operation": {"operation": "display"},
        "input": {
            "()": [{"entity": "regular tasks"}]
        },
        "output": {
            "()": [{"entity": "milestone"}]
        },
        "restriction": {
            "()": ["visually", "differently"]
        }
    },
    {
        "#": "FR-82-1",
        "*": "functional",
        ":": "A GUI of task property provides interface and functions to add and remove human resource assignments by using an object of the resource assignments collection class.",
        "agent": {"entity": "GUI of task property"},
        "operation": {"operation": "add"},
        "input": {
            "()": [
                {"entity": "human resource assignments"},
                {"entity": "object of the resource assignments collection class"}
            ]
        },
        "restriction": {
            "()": ["by using an object of the resource assignments collection class"]
        }
    },
    {
        "#": "FR-82-2",
        "*": "functional",
        ":": "A GUI of task property provides interface and functions to add and remove human resource assignments by using an object of the resource assignments collection class.",
        "agent": {"entity": "GUI of task property"},
        "operation": {"operation": "remove"},
        "input": {
            "()": [
                {"entity": "human resource assignments"},
                {"entity": "object of the resource assignments collection class"}
            ]
        },
        "output": {
            "()": [{"entity": "human resource assignments"}]
        },
        "restriction": {
            "()": ["by using an object of the resource assignments collection class"]
        }
    },
    {
        "#": "FR-83",
        "*": "functional",
        ":": "The human resource class contains name, phone, email, and holidays.",
        "agent": {"entity": "human resource class"},
        "operation": {"operation": "contain"},
        "input": {
            "()": [
                {"entity": "name"},
                {"entity": "phone"},
                {"entity": "email"},
                {"entity": "holidays"}
            ]
        }
    },
    {
        "#": "FR-84-1",
        "*": "functional",
        ":": "The human resource class provides functions to set and get name, phone, email, and holidays.",
        "agent": {"entity": "human resource class"},
        "operation": {"operation": "set"},
        "input": {
            "()": [
                {"entity": "name"},
                {"entity": "phone"},
                {"entity": "email"},
                {"entity": "holidays"}
            ]
        }
    },
    {
        "#": "FR-84-2",
        "*": "functional",
        ":": "The human resource class provides functions to set and get name, phone, email, and holidays.",
        "agent": {"entity": "human resource class"},
        "operation": {"operation": "get"},
        "output": {
            "()": [
                {"entity": "name"},
                {"entity": "phone"},
                {"entity": "email"},
                {"entity": "holidays"}
            ]
        }
    },
    {
        "#": "FR-85",
        "*": "functional",
        ":": "A class is used to represent the holidays.",
        "agent": {"entity": "class"},
        "operation": {"operation": "represent"},
        "input": {
            "()": [{"entity": "holidays"}]
        }
    },
    {
        "#": "FR-86",
        "*": "functional",
        ":": "There can be multiple holidays.",
        "agent": {"entity": "multiple holidays"},
        "operation": {"operation": "there be"}
    },
    {
        "#": "FR-87",
        "*": "functional",
        ":": "The class for holidays provides functions to get the start/end date.",
        "agent": {"entity": "holiday class"},
        "operation": {"operation": "get"},
        "output": {
            "()": [{"entity": "holidays"}]
        }
    },
    {
        "#": "FR-88",
        "*": "functional",
        ":": "The class for holidays also provides a function to check if a special date is in holiday.",
        "agent": {"entity": "holiday class"},
        "operation": {"operation": "check"},
        "input": {
            "()": [
                {"entity": "special date"},
                {"entity": "holiday"}
            ]
        }
    },
    {
        "#": "FR-89",
        "*": "functional",
        ":": "A human resource assignment class is used to represent the relationship between one task and one human resource.",
        "agent": {"entity": "human resource assignment class"},
        "operation": {"operation": "represent"},
        "input": {
            "()": [
                {"entity": "relationship between one task and one human resource"},
                {"entity": "task"},
                {"entity": "human resource"}
            ]
        }
    },
    {
        "#": "FR-90",
        "*": "functional",
        ":": "The human resource assignment class provides functions to get the task and the human resource.",
        "agent": {"entity": "human resource assignment class"},
        "operation": {"operation": "get"},
        "input": {
            "()": [
                {"entity": "task"},
                {"entity": "human resource"}
            ]
        }
    },
    {
        "#": "FR-91",
        "*": "functional",
        ":": "GUI needs to provide ability to delete resources from a project.",
        "agent": {"entity": "GUI"},
        "operation": {"operation": "delete"},
        "input": {
            "()": [
                {"entity": "resources"},
                {"entity": "project"}
            ]
        },
        "output": {
            "()": [{"entity": "resources"}]
        }
    },
    {
        "#": "FR-92",
        "*": "functional",
        ":": "An assignment of a resource to a task is captured as a relationship.",
        "operation": {"operation": "capture"},
        "input": {
            "()": [
                {"entity": "assignment of a resource to a task"}
            ]
        },
        "output": {
            "()": [{"entity": "relationship"}]
        }
    },
    {
        "#": "FR-93",
        "*": "functional",
        ":": "When a resource is removed, all the tasks where the resource is assigned need to be updated.",
        "event": {
            "()": [{
                "#": "When a resource is removed",
                "*": "condition",
                "operation": {"operation": "remove"},
                "input": {
                    "()": [{"entity": "resource"}]
                }
            }]
        },
        "operation": {"operation": "update"},
        "input": {
            "()": [{"entity": "all the tasks where the resource is assigned"}]
        },
        "output": {
            "()": [{"entity": "all the tasks where the resource is assigned"}]
        }
    },
    {
        "#": "FR-94",
        "*": "functional",
        ":": "A GUI provides interface and functions to edit the properties of objects of the human resource class.",
        "agent": {"entity": "GUI"},
        "operation": {"operation": "edit"},
        "input": {
            "()": [{"entity": "properties of objects of the human resource class"}]
        },
        "output": {
            "()": [{"entity": "properties of objects of the human resource class"}]
        }
    },
    {
        "#": "FR-95",
        "*": "functional",
        ":": "GUI needs to provide ability to link tasks in a project.",
        "agent": {"entity": "GUI"},
        "operation": {"operation": "link"},
        "input": {
            "()": [{"entity": "tasks in a project"}]
        }
    },
    {
        "#": "FR-96",
        "*": "functional",
        ":": "The fact of linking of one task to another should be captured as dependency between two tasks.",
        "operation": {"operation": "capture"},
        "output": {
            "()": [
                {"entity": "linking of one task to another"},
                {"entity": "dependency between two tasks"}
            ]
        }
    },
    {
        "#": "FR-97",
        "*": "functional",
        ":": "When a two or more tasks are link, there should be check conducted for potential collisions on the chart.",
        "event": {
            "()": [{
                "#": "When a resource is removed",
                "*": "condition",
                "operation": {"operation": "link"},
                "input": {
                    "()": [{"entity": "two or more tasks"}]
                }
            }]
        },
        "operation": {"operation": "check"},
        "input": {
            "()": [{"entity": "chart"}]
        },
        "output": {
            "()": [{"entity": "potential collisions on the chart"}]
        }
    },
    {
        "#": "FR-98",
        "*": "functional",
        ":": "The start/end dates for the graph can be either flexible or rigid.",
        "agent": {"entity": "start/end dates for the graph"},
        "operation": {"operation": "be either flexible or rigid"}
    }
]