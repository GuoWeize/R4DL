function entity_similar
(entity, entity) boolean:
or (
    and (
        ! (is_null(($2$.owner))),
        entity_similar ($1$, ($2$.owner))
    ),
    and (
        ! (is_null(($1$.property))),
        entity_similar (($1$.property), $2$)
    ),
    and (
        ! (is_null(($1$.content))),
        entity_similar (($1$.content), $2$)
    ),
    and (
        == (($1$.base), ($2$.base)),
        include (($2$.constraints), ($1$.constraints))
    )
)

rule interaction
(functional, functional) boolean:
for any inEntity in ($2$.input)
    for any outEntity in ($1$.output)
        == (outEntity, inEntity)

function operation_contradict
(operation, operation) boolean:
and (
    ! (($1$.isAble)),
    ! (($2$.isAble)),
    or (
        and (
            antonym (($1$.reaction), ($2$.reaction)),
            == (($1$.isNot), ($2$.isNot))
        ),
        and (
            synonym (($1$.reaction), ($2$.reaction)),
            != (($1$.isNot), ($2$.isNot))
        )
    )
)

function entities_similar
(set<entity>, set<entity>) boolean:
for all e1 in $2$
    for any e2 in $1$
        entity_similar (e1, e2)

function input_output_similar
(functional, functional) boolean:
and (
    or (
        entities_similar (($1$.input), ($2$.input)),
        entities_similar (($2$.input), ($1$.input))
    ),
    or (
        entities_similar (($1$.output), ($2$.output)),
        entities_similar (($2$.output), ($1$.output))
    )
)

rule operation_inconsistency
(functional, functional) boolean:
and (
    entity_similar (($1$.agent), ($2$.agent)),
    operation_contradict (($1$.operation), ($2$.operation)),
    or (
        include (($1$.restriction), ($2$.restriction)),
        include (($2$.restriction), ($1$.restriction))
    ),
    input_output_similar ($1$, $2$)
)

function operation_similar
(operation, operation) boolean:
and (
    synonym (($1$.reaction), ($2$.reaction)),
    == (($1$.isNot), ($2$.isNot)),
    == (($1$.isAble), ($2$.isAble))
)

rule similar
(functional, functional) boolean:
and (
    entity_similar (($1$.agent), ($2$.agent)),
    operation_similar (($1$.operation), ($2$.operation)),
    or (
        include (($1$.restriction), ($2$.restriction)),
        include (($2$.restriction), ($1$.restriction))
    ),
    input_output_similar ($1$, $2$)
)
function similar
(functional, condition) boolean:
and (
    entity_similar (($1$.agent), ($2$.agent)),
    operation_similar (($1$.operation), ($2$.operation)),
    or (
        include (($1$.restriction), ($2$.restriction)),
        include (($2$.restriction), ($1$.restriction))
    )
)

rule precondition
(functional, functional) boolean:
for any cond in ($2$.event)
    similar ($1$, cond)

function tongyi
(operation, operation) boolean:
and (
    == (($1$.isAble), ($2$.isAble)),
    == (($1$.isNot), ($2$.isNot)),
    synonym (($1$.reaction), ($2$.reaction))
)

rule require
(functional, functional) boolean:
for any i in ($1$.event)
    tongyi ((i.operation), ($2$.operation))
